/**
 * @mainpage Home
 * 
 * @section intro_sec Introduction
 * 
 * UniQOS is a custom embedded operating system designed for mobile devices.
 * This project has been structured around the STM32 ecosystem while aiming to be as modular as possible 
 * without any reliance on developing within the environment generated by CubeMX/HAL. This means any 
 * generated code from CubeMX **WILL NOT** need to be and **SHOULD NOT** be edited at any point.
 * 
 * This documentation covers the complete API for all drivers and system components.
 * 
 * @section project_structure Project Structure
 * 
 * @subsection drivers_dir @ref drivers "drivers/"
 * Any files relevant to hardware / peripheral level interactions will be found here. You will also need to run test files using make from this directory.
 * 
 * @subsection include_dir @ref include "include/"
 * Store all .h project files here
 * 
 * @subsection kernel_dir @ref kernel "kernel/"
 * RTOS level interactions, task management, timing and main entry point for the OS.
 * 
 * @subsection tests_dir @ref tests "tests/"
 * Any relevant tests you need to run will be stored here. Start with test_template.c and create a copy to run any tests you need, just make sure to create a new Makefile argument and specify the file path.
 * 
 * @subsection third_party_dir @ref third_party "third_party/"
 * Any external libraries not developed by the UQ Phone team is stored in this directory
 * 
 * @subsection ui_dir @ref ui "ui/"
 * Drawing functions and display ui level files stored here.
 * 
 * @section hardware_sec Hardware Components
 * 
 * - **STM32H7xx:** Microcontroller
 * - **RC7620:** Cellular Module
 * - **NAU88C22:** Audio Codec
 * - **DRV2603:** Vibration Motor Driver
 * - **LSM6DSVTR:** Motion sensor
 * - **WS2812:** RGB LED IC
 * - **BQ27441:** Fuel Gauge IC
 * - **MCP73871:** Battery Management
 * 
 * @section task_mapping_sec Planned Task Mapping
 * 
 * | Task               | Priority |
 * | :----------------- | -------: |
 * | Cellular Task      |     High |
 * | Audio Task         |     High |
 * | Call State Task    |   Medium |
 * | Power Management   |   Medium |
 * | Watchdog Task      |   Medium |
 * | UI/Display Task    |  Low-mid |
 * | Input handler Task |  Low-mid |
 * | Logging Task       |      Low |
 * 
 * @section task_comm_sec Task Communication
 * 
 * - Queue from Input → UI
 * - Queue from UI → Call State
 * - Queue or event group from Call State → Cellular Task
 * - Queue from Cellular Task → Call State
 * - Event group or direct-to-task notification from Call State → Audio Codec Task
 * 
 * @section cubemx_config_sec CubeMX Configuration
 * 
 * I should eventually create a script to automate this process but for now please follow these instructions if you need to make changes to the .ioc file. The relevant .ioc files are found in third_party/stm32.
 * 
 * @subsection cubemx_step1 Step 1: Project Settings
 * These settings should already be set but double check:
 * - `Project Manager` → `Project` → `Application Structure` "Do not generate the main()" is ticked and `Toolchain / IDE` is set to Makefile.
 * - `Project Manager` → `Code Generator` → `Generate peripheral initialization as a pair of c/h files per peripheral` is ticked.
 * 
 * @subsection cubemx_step2 Step 2: Code Generation
 * You can now make changes to the .ioc and generate the code. All files will be generated in their correct locations so you will not need to move them. After generation, if you have made any changes to the clock configurations or memory region (MPU), you will need to copy the MPU_Config and SystemClock_Config functions in third_party/stm32/Core/src and place these in your entry point files (test files and kernel). 
 * 
 * Now go to third_party/stm32/Core/src and delete main.c. The reasoning behind this is that CubeMX does not expose the MPU_Config and SystemClock_Config configs to main.h for other files to access. This forces us to use main.c as the entry point for the project, as otherwise copying these functions out of main.c and reusing them in other files will result in a multiple definition error. While we can just rename these functions to avoid this error, I would prefer to just remove the file entirely.
 * 
 * @subsection cubemx_step3 Step 3: Makefile Configuration
 * Go to third_party/stm32/Makefile and first delete the Core/Src/main.c def then copy all the defines in C_SOURCES and place them under STM32_BASE_SOURCES in both the drivers/Makefile and kernel/Makefile. These need to be redefined as when we use our custom Makefile it invokes the third-party Makefile after redefining C_SOURCES. The third-party Makefile uses the C_SOURCES value passed to it during the invocation, effectively replacing its own definition of C_SOURCES.
 * 
 * @section drivers_sec Driver Modules
 * 
 * The system is organized into several driver modules:
 * 
 * @subsection display_drivers Display Drivers
 * - @ref display_basic "Basic Display Functions" - Initialization and control
 * - @ref display_drawing "Drawing Functions" - Shapes, lines, and graphics
 * - @ref display_text "Text Functions" - Character and string rendering
 * - @ref display_utility "Utility Functions" - Color conversion and helpers
 * 
 * @subsection audio_drivers Audio Drivers 
 * - @ref nau88c22_basic "Basic Audio Functions" - Initialization and control
 * - @ref nau88c22_volume "Volume Control" - Audio volume management
 * - @ref nau88c22_mute "Mute Control" - Audio muting functions
 * 
 * @subsection modem_drivers Modem Drivers
 * - @ref modem_driver "Modem Driver" - Cellular communication
 * - @ref at_commands "AT Commands" - AT command interface
 * 
 * @subsection peripheral_drivers Peripheral Drivers
 * - @ref keypad_driver "Keypad Driver" - Input handling
 * - @ref power_driver "Power Management" - Battery and charging
 * - @ref sensor_drivers "Sensor Drivers" - IMU and other sensors
 * 
 * @section kernel_sec Kernel Components
 * 
 * @subsection task_system Task System
 * - @ref task_manager "Task Manager" - Core task scheduling
 * - @ref memory_management "Memory Management" - Dynamic memory allocation
 * 
 * @subsection data_structures Data Structures
 * - @ref bptree "B+ Tree" - Contact storage and management
 * - @ref sms_types "SMS Types" - Message handling structures
 * 
 * @section ui_sec User Interface
 * 
 * @subsection ui_components UI Components
 * - @ref ui_pages "UI Pages" - Application screens
 * - @ref ui_components "UI Components" - Reusable UI elements
 * - @ref ui_overlays "UI Overlays" - Modal dialogs and notifications
 * 
 * @section api_sec API Reference
 * 
 * For detailed API documentation, see the individual module pages:
 * - @ref display_basic "Display Functions"
 * - @ref nau88c22_basic "Audio Functions"  
 * - @ref modem_driver "Modem Functions"
 * - @ref kernel "Kernel Components"
 * - @ref ui "User Interface"
 */
