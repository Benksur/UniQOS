/**
 * @mainpage Home
 * 
 * @section intro_sec Introduction
 * 
 * UniQOS is a custom embedded operating system designed for mobile devices.
 * This project has been structured around the STM32 ecosystem while aiming to be as modular as possible 
 * without any reliance on developing within the environment generated by CubeMX/HAL. This means any 
 * generated code from CubeMX **WILL NOT** need to be and **SHOULD NOT** be edited at any point.
 * 
 * This documentation covers the complete API for all drivers and system components.
 * 
 * @section project_structure Project Structure
 * 
 * @subsection drivers_dir @ref drivers "drivers/"
 * Any files relevant to hardware / peripheral level interactions will be found here. You will also need to run test files using make from this directory.
 * 
 * @subsection include_dir @ref include "include/"
 * Store all .h project files here
 * 
 * @subsection kernel_dir @ref kernel "kernel/"
 * RTOS level interactions, task management, timing and main entry point for the OS.
 * 
 * @subsection tests_dir @ref tests "tests/"
 * Any relevant tests you need to run will be stored here. Start with test_template.c and create a copy to run any tests you need, just make sure to create a new Makefile argument and specify the file path.
 * 
 * @subsection ui_dir @ref ui "ui/"
 * Drawing functions and display ui level files stored here.
 *
 * @subsection audio_dir @ref audio "audio/"
 * Audio mixing and sound generation functions, transmitted to codec through I2S
 *
 * @subsection third_party_dir @ref third_party "third_party/"
 * Any external libraries not developed by the UQ Phone team is stored in this directory
 *
 * @section cubemx_config_sec CubeMX Configuration
 * 
 * @subsection cubemx_step1 Step 1: Project Settings
 * These settings should already be set but double check:
 * - `Project Manager` → `Project` → `Application Structure` "Do not generate the main()" is ticked and `Toolchain / IDE` is set to Makefile.
 * - `Project Manager` → `Code Generator` → `Generate peripheral initialization as a pair of c/h files per peripheral` is ticked.
 * 
 * @subsection cubemx_step2 Step 2: Code Generation
 * You can now make changes to the .ioc and generate the code. All files will be generated in their correct locations so you will not need to move them. After generation, if you have made any changes to the clock configurations or memory region (MPU), you will need to copy the MPU_Config and SystemClock_Config functions in third_party/stm32/Core/src/main.c and place these in your entry point files (test files and kernel). 
 * 
 * @subsection cubemx_step3 Step 3: Makefile Configuration
 * Go to third_party/stm32/Makefile and copy all the defines in C_SOURCES and place them under STM32_BASE_SOURCES in both the drivers/Makefile and kernel/Makefile. These need to be redefined as when we use our custom Makefile it invokes the third-party Makefile after redefining C_SOURCES. The third-party Makefile uses the C_SOURCES value passed to it during the invocation, effectively replacing its own definition of C_SOURCES.
 * 
 *
 * @section additional_info_sec Additional Information
 * 
 * @subsection hardware_sec Hardware Components
 * 
 * - **STM32H7xx:** Microcontroller
 * - **RC7620:** Cellular Module
 * - **ST7789V:** 240x320 TFT LCD
 * - **NAU88C22:** Audio Codec
 * - **DRV2603:** Vibration Motor Driver
 * - **LSM6DSVTR:** Motion sensor
 * - **WS2812:** RGB LED IC
 * - **BQ27441:** Fuel Gauge IC
 * - **MCP73871:** Battery Management
 * 
 * @subsection task_management_sec Task Management
 * 
 * @subsubsection task_mapping_sec Task Priorities
 * 
 * | Task               |   Priority  |
 * | :----------------- | ----------: |
 * | Audio Task         |        High |
 * | Call State Task    | AboveNormal |
 * | Cellular Task      |      Normal |
 * | Display Task       |      Normal |
 * | Input Task         |      Normal |
 * | Power Task         |         Low |
 * 
 * @subsubsection task_comm_sec Task Communication
 * 
 * All inter-task communication uses **FreeRTOS Queues** via `PostCommand()` API functions, except where noted.
 * 
 * **Input Task** sends to:
 * - Display Task (Queue): Input events, volume display updates
 * - Audio Task (Queue): Volume control commands, sound playback
 * - Call State Task (Queue): Test commands (incoming call simulation)
 * 
 * **Display Task** sends to:
 * - Cellular Task (Queue): Dial, hangup, send SMS commands
 * - Call State Task (Queue): Answer call, hangup commands
 * - Power Task (Queue): Battery statistics requests
 * 
 * **Cellular Task** sends to:
 * - Display Task (Queue): Signal status updates, incoming SMS notifications, RTC sync
 * - Call State Task (Queue): Incoming call notifications, dialling status
 * - Receives from: GPIO ISR via **Direct Task Notifications** (RI pin interrupt for incoming events)
 * 
 * **Call State Task** sends to:
 * - Display Task (Queue): Call UI updates (incoming, active, ended, dialling screens)
 * - Uses internally: **Event Groups** for state coordination (incoming, answer, hangup, display events)
 * 
 * **Power Task** sends to:
 * - Display Task (Queue): Battery status updates, battery statistics
 * 
 * @subsubsection task_peripherals_sec Task Peripheral Ownership
 * 
 * Each task has exclusive control over specific hardware peripherals:
 * 
 * | Task               | Owned Peripherals                                                    |
 * | :----------------- | :------------------------------------------------------------------- |
 * | Audio Task         | NAU88C22 Audio Codec (I2S), HP_DET GPIO, AUDIO_SW GPIO              |
 * | Call State Task    | DRV2603 Vibration Motor Driver (TIM3), LED GPIO (GPIOB Pin 0)       |
 * | Cellular Task      | RC7620 Cellular Modem (UART), MODEM_RI GPIO (PC6 Interrupt), UART_DTR GPIO |
 * | Display Task       | ST7789V Display Controller (SPI/FMC), Backlight GPIO (PA6), LOAD_SW GPIO |
 * | Input Task         | Keypad GPIO Matrix                                                   |
 * | Power Task         | BQ27441 Battery Fuel Gauge (I2C)                                     |
 * 
 * 
 * @section api_sec API Reference
 * 
 * For detailed API documentation, see the individual module pages:
 * - See @ref drivers "Hardware Drivers" for all peripheral and device drivers
 * - See @ref kernel "Kernel" for RTOS tasks and core system components
 * - See @ref ui "User Interface" for UI pages, components, and rendering
 * - See @ref audio "Audio System" for audio mixing and sound generation
 */
